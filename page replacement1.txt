Name : kadam Gaurav Sanjay
Roll No:3272
Practical No:9
1)First Come First Serve:
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;
public class FCFS {
public static void main(String Args[])
{
Scanner sc = new Scanner(System.in);
 System.out.println("Enter Number of Pages:");
 int numPages=sc.nextInt();
 int pages[]=new int[numPages];
 System.out.println("Enter Reference String: ");
 for(int i=0;i<numPages;i++)
 {
 pages[i]=sc.nextInt();
 }
 System.out.println("Enter Number of Frames");
 int capacity=sc.nextInt();
 //To represent set of current pages
 HashSet<Integer> frames=new HashSet<>(capacity);
 //To store pages o=in FIFO manner
 Queue<Integer> index=new LinkedList<>();
 int pageFaults=0;
 int hits=0;
 for(int i=0;i<numPages;i++)
 {
 if(frames.size()<capacity) //check if set can hold n=more 
pages
 {
 //IF page not present insert into set and increment 
pagefault
 if(!frames.contains(pages[i])) 
 {
 frames.add(pages[i]);
 index.add(pages[i]); //push current page into 
queue
 pageFaults++;
// System.out.println(pageFaults);
// frames.forEach(System.out::print); 
 for(int j:index)
 System.out.print(j+"\t");
 System.out.println();
 }
 else
 {
 hits++;
 }
 }
 else //set is full,need replacement
 {
 if(!frames.contains(pages[i])) //frame is not present 
present
 {
 int val=index.peek();
 index.poll();
 frames.remove(val);
 frames.add(pages[i]);
 index.add(pages[i]);
 pageFaults++;
 for(int j:index)
 System.out.print(j+"\t");
 System.out.println();
 }
 else //frame is present in set
 {
 hits++;
 }
 }
 }
 System.out.println("Number of Page Faults : "+pageFaults);
 System.out.println("Hits:\t"+hits);
 System.out.println("hit ratio: "+((double)hits/(double)numPages));
}
}
Output:
/*
Enter Number of Pages:
12
2 3 2 1 5 2 4 5 3 2 5 2
Enter Number of Frames
3
1
2
3
4
5
6
7
8
9
Number of Page Faults : 9
Hits: 3
hit ratio: 0.25
*/
K:\sposl\PageReplacement\src>java FCFS
Enter Number of Pages:
4
Enter Reference String:
1 2 3 4
Enter Number of Frames
4
1
1 2
1 2 3
1 2 3 4
Number of Page Faults : 4
Hits: 0
hit ratio: 0.0
K:\sposl\PageReplacement\src>java FCFS
Enter Number of Pages:
5
Enter Reference String:
1 2 3 1 4
Enter Number of Frames
3
1
1 2
1 2 3
2 3 4
Number of Page Faults : 4
Hits: 1
hit ratio: 0.2
2)LRU(Least Recently Used) Algorithm
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Scanner;
public class LRU {
public static void main(String args[])
{
Scanner sc = new Scanner(System.in);
 System.out.println("Enter Number of Pages:");
 int numPages=sc.nextInt();
 int pages[]=new int[numPages];
 System.out.println("Enter Reference String: ");
 for(int i=0;i<numPages;i++)
 {
 pages[i]=sc.nextInt();
 }
 System.out.println("Enter Number of Frames");
 int capacity=sc.nextInt();
 //To represent set of current pages
 HashSet<Integer> frames=new HashSet<>(capacity);
 //To store LRU Indexes of pages //<key=Page,value=index>
 HashMap<Integer,Integer> index=new HashMap<>();
 int pageFaults=0;
 int hits=0;
 for(int i=0;i<numPages;i++)
 {
 if(frames.size()<capacity) //check if set can hold n=more 
pages
 {
 //IF page not present insert into set and increment 
pagefault
 if(!frames.contains(pages[i])) 
 {
 frames.add(pages[i]);
 index.put(pages[i],i); //push current page into 
queue
 pageFaults++;
 /*for(int j:index)
 System.out.print(j+"\t");
 System.out.println();*/
 }
 else
 {
 hits++;
 index.put(pages[i],i); 
 }
 }
 else //set is full,need replacement
 {
 if(!frames.contains(pages[i])) //frame is not present 
present
 {
 int lru=Integer.MAX_VALUE;
 int val=Integer.MIN_VALUE;
 Iterator<Integer> itr=frames.iterator();
 while(itr.hasNext())
 {
 int temp=itr.next();
 if(index.get(temp)<lru)
 {
 lru=index.get(temp);
 val=temp;
 }
 }
 frames.remove(val);
 frames.add(pages[i]);
 pageFaults++;
 index.put(pages[i], i);
 }
 else //frame is present in set
 {
 hits++;
 index.put(pages[i],i); 
 }
 }
 frames.forEach(System.out::print);
 System.out.println();
 }
 System.out.println("Number of Page Faults : "+pageFaults);
 System.out.println("Hits:\t"+hits);
 System.out.println("hit ratio: "+((double)hits/(double)numPages));
}
}
output::
/*
 * Enter Number of Pages:
12
Enter Reference String: 
2 3 2 1 5 2 4 5 3 2 5 2
Enter Number of Frames
3
2
23
23
123
152
152
452
452
453
523
523
523
Number of Page Faults : 7
Hits: 5
hit ratio: 0.4166666666666667
*/
K:\sposl\PageReplacement\src>javac LRU.java
K:\sposl\PageReplacement\src>java LRU
Enter Number of Pages:
5
Enter Reference String:
1 2 3 1 2
Enter Number of Frames
3
1
12
123
123
123
Number of Page Faults : 3
Hits: 2
hit ratio: 0.4
K:\sposl\PageReplacement\src>java LRU
Enter Number of Pages:
7
Enter Reference String:
1 2 3 4 5 1 2
Enter Number of Frames
4
1
12
123
1234
2345
1345
1245
Number of Page Faults : 7
Hits: 0
hit ratio: 0.0
3)Optimal Page Replacement Algorithm::
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Scanner;
public class Optimal {
public static void main(String args[])
{
 Scanner sc = new Scanner(System.in);
 System.out.println("Enter Number of Pages:");
 int numPages=sc.nextInt();
 int pages[]=new int[numPages];
 System.out.println("Enter Reference String: ");
 for(int i=0;i<numPages;i++)
 {
 pages[i]=sc.nextInt();
 }
 System.out.println("Enter Number of Frames");
 int capacity=sc.nextInt();
 HashSet<Integer> frames=new HashSet<>();
 HashMap<Integer, Integer> index=new HashMap<>();
 int pagefaults=0;
 int hits=0;
 for(int i=0;i<numPages;i++)
 {
 if(frames.size()<capacity)
 {
 if(!frames.contains(pages[i]))
 {
 pagefaults++;
 frames.add(pages[i]);
 //finding next access of page
 int farthest=nextIndex(pages, i);
 index.put(pages[i], farthest);
 }
 else
 {
 hits++;
 index.put(pages[i], nextIndex(pages,i));
 }
 }
 else
 {
 if(!frames.contains(pages[i]))
 {
 int farthest=-1;
 int val=0;
 Iterator<Integer> itr=frames.iterator();
 while(itr.hasNext())
 {
 int temp=itr.next();
 if(index.get(temp)>farthest)
 {
 farthest=index.get(temp);
 val=temp;
 }
 }
 frames.remove(val);
 index.remove(farthest);
 frames.add(pages[i]);
 pagefaults++;
 int nextUse=nextIndex(pages, i);
 index.put(pages[i],nextUse);
 }
 else
 {
 hits++;
 index.put(pages[i], nextIndex(pages, i));
 }
 }
 frames.forEach(System.out::print);
 System.out.println();
 }
 System.out.println("Number of Page Faults : "+pagefaults);
 System.out.println("Hits:\t"+hits);
 System.out.println("hit ratio: "+((double)hits/(double)numPages));
}
public static int nextIndex(int pages[],int curIndex)
{
 int farthest=curIndex;
 int currentPage=pages[curIndex];
 int j=farthest;
 for(j=farthest+1;j<pages.length;j++)
 {
 if(pages[j]==currentPage)
 {
 farthest=j;
 return farthest; //5 6 7 8 9
 }
 }
 return Integer.MAX_VALUE;
}
}
output::
K:\sposl\PageReplacement\src>javac Optimal.java
K:\sposl\PageReplacement\src>java Optimal
Enter Number of Pages:
7
Enter Reference String:
1 2 3 2 4 2 1
Enter Number of Frames
3
1
12
123
123
124
124
124
Number of Page Faults : 4
Hits: 3
hit ratio: 0.42857142857142855
K:\sposl\PageReplacement\src>java Optimal
Enter Number of Pages:
8
Enter Reference String:
1 2 3 2 4 2 5 6
Enter Number of Frames
4
1
12
123
123
1234
1234
2345
3456
Number of Page Faults : 6
Hits: 2
hit ratio: 0.25